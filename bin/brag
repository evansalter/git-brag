#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

def convInt(s):
    try:
        return int(s)
    except ValueError:
        return 0

def zeroIfNull(s):
    if s.rstrip() == '':
        return "0"
    else:
        return str(s)

def printGraph():
    print("Percentage of lines inserted per user:")
    try:
        for username, i in zip(usernames, inserted):
           percent = float(zeroIfNull(i))/totalInserted*100
           if not len(usernames) > 30 or not percent < 0.5:
                print("["),
                numSigns=0
                for i in range(0, int(percent), 5):
                     print("#"),
                     numSigns += 1
                for i in range(numSigns, 20, 1):
                     print("-"),
                print("] " + str(int(percent)) + "%\t--> " + str(username))
    except ZeroDivisionError:
        print("No data to show")

def inRepo():
    try:
        subprocess.check_output("git status", shell=True)
        return 0
    except:
        sys.exit(-1)

def parseArgs():
    parser = argparse.ArgumentParser(description="Calculate the contribution of each author in a git repository")
    parser.add_argument("-s", "--start", help="Start date for search range.  Can be human-readable, such as \"One week ago\" or numerical, like \"2015-01-06\".  Must be in double quotes.")
    parser.add_argument("-e", "--end", help="End date for search range.  Can be human-readable, such as \"One week ago\" or numerical, like \"2015-01-06\".  Must be in double quotes.")
    return parser.parse_args()


inRepo()

args = parseArgs()

usernames = subprocess.check_output("git shortlog -s | cut -c8- | sort -u", shell=True).splitlines()

cmd1 = "git log --shortstat --author \""
cmd2 = ""

if args.start and not args.end:
    # start only
    cmd2 = "\" --since \"" + args.start + "\" | grep \"files\\? changed\" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print files, inserted, deleted}'"
elif args.start and args.end:
    # start and end
    cmd2 = "\" --since \"" + args.start + "\" --until \"" + args.end + "\" | grep \"files\\? changed\" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print files, inserted, deleted}'"
elif not args.start and args.end:
    # end only
    cmd2 = "\" --until \"" + args.end + "\" | grep \"files\\? changed\" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print files, inserted, deleted}'"
else:
    # neither
    cmd2 = "\" | grep \"files\\? changed\" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print files, inserted, deleted}'"

files = []
inserted = []
deleted = []

cmds = [cmd1 + str(username) + cmd2 for username in usernames]
outputs = [subprocess.check_output(cmd, shell=True) for cmd in cmds]
for output in outputs:
    files.append(str(subprocess.check_output("echo \"" + str(output) + "\" | cut -d ' ' -f1", shell=True).rstrip()))
    inserted.append(str(subprocess.check_output("echo \"" + str(output) + "\" | cut -d ' ' -f2", shell=True).rstrip()))
    deleted.append(str(subprocess.check_output("echo \"" + str(output) + "\" | cut -d ' ' -f3", shell=True).rstrip()))

for username, file, i, d in zip(usernames, files, inserted, deleted):
    print(str(username) + ":")
    print("Files changed: " + str(file))
    print("Lines inserted: " + str(i))
    print("Lines deleted: " + str(d))
    print("---------------------------")


totalFiles = sum(convInt(f) for f in files)
totalInserted = sum(convInt(i) for i in inserted)
totalDeleted = sum(convInt(d) for d in deleted)

print("\nTotals:")
print("Files changed: " + str(totalFiles))
print("Lines inserted: " + str(totalInserted))
print("Lines deleted: " + str(totalDeleted) + "\n")

printGraph()
